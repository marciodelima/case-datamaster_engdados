name: Deploy HELMs Tools to AKS

on:
  push:
    branches: [main]
    paths:
      - iac/aks-deploy/**

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: iac/aks-deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Azure Login
        run: |
          az login --service-principal \
            -u ${{ secrets.AZURE_CLIENT_ID }} \
            -p ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Set AKS context
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ secrets.AKS_NAME }}
          resource-group: ${{ secrets.AKS_RG }}

      - name: Create namespaces
        run: |
          for NS in airflow elk grafana prometheus nginx spark-operator spark-history spark keda; do
            az aks command invoke \
              --resource-group ${{ secrets.AKS_RG }} \
              --name ${{ secrets.AKS_NAME }} \
              --command "kubectl create namespace $NS"
          done

      - name: Deploy Helm charts
        run: |
          for CHART in airflow elk grafana prometheus nginx keda; do
            FILE="values/${CHART}.yaml"
            if [ -f "$FILE" ]; then
              ENCODED=$(base64 -w 0 "$FILE")
              az aks command invoke \
                --resource-group ${{ secrets.AKS_RG }} \
                --name ${{ secrets.AKS_NAME }} \
                --command "
                  echo $ENCODED | base64 -d > ${CHART}.yaml
                  helm repo add apache-airflow https://airflow.apache.org
                  helm repo add grafana https://grafana.github.io/helm-charts
                  helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                  helm repo add elastic https://helm.elastic.co
                  helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
                  helm repo add kedacore https://kedacore.github.io/charts
                  helm repo update
      
                  case $CHART in
                    airflow)
                      helm upgrade --install airflow apache-airflow/airflow --namespace airflow --values airflow.yaml
                      ;;
                    elk)
                      helm upgrade --install elasticsearch elastic/elasticsearch --namespace elk --values elk.yaml
                      helm upgrade --install kibana elastic/kibana --namespace elk --values elk.yaml
                      ;;
                    grafana)
                      helm upgrade --install grafana grafana/grafana --namespace grafana --values grafana.yaml
                      ;;
                    prometheus)
                      helm upgrade --install prometheus prometheus-community/prometheus --namespace prometheus --values prometheus.yaml
                      ;;
                    nginx)
                      helm upgrade --install nginx ingress-nginx/ingress-nginx --namespace nginx --values nginx.yaml
                      ;;
                    keda)
                      helm upgrade --install keda kedacore/keda --namespace keda --values keda.yaml
                      ;;
                  esac
                "
            else
              echo "Arquivo $FILE n√£o encontrado - $CHART."
            fi
          done

      - name: Create federated identity for each namespace
        run: |
          OIDC_URL=$(az aks show \
            --name ${{ secrets.AKS_NAME }} \
            --resource-group ${{ secrets.AKS_RG }} \
            --query "oidcIssuerProfile.issuerUrl" -o tsv)

          for NS in airflow elk grafana spark prometheus nginx app spark-operator spark-history keda; do
            az identity federated-credential create \
              --name ${NS}-federation \
              --identity-name ${{ secrets.MANAGED_IDENTITY_NAME }} \
              --resource-group ${{ secrets.AKS_RG }} \
              --issuer $OIDC_URL \
              --subject system:serviceaccount:${NS}:${NS}-sa \
              --audiences api://AzureADTokenExchange
          done

      - name: Apply Kubernetes manifests
        run: |
          for DIR in secrets controllers ingress pvc rbac; do
            az aks command invoke \
              --resource-group ${{ secrets.AKS_RG }} \
              --name ${{ secrets.AKS_NAME }} \
              --command "kubectl apply -f iac/aks-deploy/manifests/$DIR/"
          done
