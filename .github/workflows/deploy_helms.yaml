---
name: Deploy HELMs Tools to AKS
on:
  push:
    branches:
      - main
    paths:
      - iac/aks-deploy/**
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: iac/aks-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Azure Login
        run: |
          az login --service-principal \
            -u ${{ secrets.AZURE_CLIENT_ID }} \
            -p ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Set AKS context
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ secrets.AKS_NAME }}
          resource-group: ${{ secrets.AKS_RG }}

      - name: Get Public IP from AKS node resource group
        run: |
          NODE_RG=$(az aks show \
            --name ${{ secrets.AKS_NAME }} \
            --resource-group ${{ secrets.AKS_RG }} \
            --query nodeResourceGroup -o tsv)

          echo "AKS Node Resource Group: $NODE_RG"

          IP=$(az network public-ip show \
            --resource-group "$NODE_RG" \
            --name aks-ingress-ip \
            --query ipAddress -o tsv)

          echo "INGRESS_IP=$IP" >> $GITHUB_ENV
          echo "Public IP: $IP"

      - name: Create namespaces
        run: >
          for NS in airflow elk app prometheus nginx spark-operator spark-history grafana dashboard
          spark keda; do
            az aks command invoke \
              --resource-group ${{ secrets.AKS_RG }} \
              --name ${{ secrets.AKS_NAME }} \
              --command "kubectl create namespace $NS"
          done

      - name: Install Prometheus CRDs
        run: |
          az aks command invoke \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_NAME }} \
            --command "
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm repo update
              helm upgrade --install prometheus-crds prometheus-community/prometheus-operator-crds \
                --namespace prometheus
            "
            
      - name: Apply Kubernetes Artifacts
        run: |
          for DIR in secrets controllers ingress pvc rbac; do
            for FILE in manifests/$DIR/*.yaml; do
                if [ -f "$FILE" ]; then
                FILENAME=$(basename "$FILE")
                az aks command invoke \
                  --resource-group ${{ secrets.AKS_RG }} \
                  --name ${{ secrets.AKS_NAME }} \
                  --command "kubectl apply -f $FILENAME" \
                  --file "$FILE"
              else
                echo "Nenhum arquivo em $DIR."
              fi
            done
          done

      - name: Deploy Helm charts
        run: >+
          az aks command invoke \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_NAME }} \
            --command "helm repo add apache-airflow https://airflow.apache.org && helm repo update && helm upgrade --install airflow apache-airflow/airflow --namespace airflow --values airflow.yaml" \
            --file values/airflow.yaml

          az aks command invoke \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_NAME }} \
            --command "helm repo add elastic https://helm.elastic.co && helm repo update && helm upgrade --install elasticsearch elastic/elasticsearch --namespace elk --values elk.yaml" \
            --file values/elk.yaml

          az aks command invoke \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_NAME }} \
            --command "helm repo add elastic https://helm.elastic.co && helm repo update && helm upgrade --install kibana elastic/kibana --namespace elk --values kibana.yaml" \
            --file values/kibana.yaml

          az aks command invoke \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_NAME }} \
            --command "helm repo add prometheus-community https://prometheus-community.github.io/helm-charts && helm repo update && helm upgrade --install prometheus prometheus-community/kube-prometheus-stack --namespace prometheus --values prometheus.yaml" \
            --file values/prometheus.yaml

          az aks command invoke \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_NAME }} \
            --command "helm repo add spark-operator https://kubeflow.github.io/spark-operator && helm repo update && helm upgrade --install spark-operator spark-operator/spark-operator --namespace spark-operator --set webhook.enable=true --set sparkJobNamespace=spark"

          helm package charts/spark-history-server --destination charts/packaged/

          az aks command invoke \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_NAME }} \
            --command "helm upgrade --install spark-history spark-history-server-0.1.0.tgz --namespace spark-history --values values.yaml" \
            --file charts/packaged/spark-history-server-0.1.0.tgz \
            --file charts/spark-history-server/values.yaml

          az aks command invoke \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_NAME }} \
            --command "helm repo add kedacore https://kedacore.github.io/charts && helm repo update && helm upgrade --install keda kedacore/keda --namespace keda --values keda.yaml" \
            --file values/keda.yaml

          az aks command invoke \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_NAME }} \
            --command "helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/ && helm repo update && helm upgrade --install dashboard kubernetes-dashboard/kubernetes-dashboard --namespace dashboard --create-namespace \
                --set protocol=https \
                --set service.externalPort=443 "
           
      - name: Deploy NGINX Ingress Controller
        run: |
            az aks command invoke \
              --resource-group ${{ secrets.AKS_RG }} \
              --name ${{ secrets.AKS_NAME }} \
              --command "
                helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx && \
                helm repo update && \
                helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx \
                  --namespace nginx \
                  --create-namespace \
                  --version 4.9.0 \
                  --set controller.ingressClassResource.name=nginx \
                  --set controller.ingressClassResource.enabled=true \
                  --set controller.ingressClassResource.default=true \
                  --set controller.service.type=LoadBalancer \
                  --set controller.service.loadBalancerIP=${{ env.INGRESS_IP }} \
                  --set controller.extraArgs.default-ssl-certificate=nginx/certificate-tls \
                  --set controller.tls.enabled=true \
                  --set controller.tls.secretName=certificate-tls \
                  --set controller.watchNamespace=\"\""

      - name: Create federated identity for each namespace
        run: >
          OIDC_URL=$(az aks show \
            --name ${{ secrets.AKS_NAME }} \
            --resource-group ${{ secrets.AKS_RG }} \
            --query "oidcIssuerProfile.issuerUrl" -o tsv)

          for NS in airflow elk grafana spark prometheus nginx app spark-operator spark-history keda; do
            az identity federated-credential create \
              --name ${NS}-federation \
              --identity-name ${{ secrets.MANAGED_IDENTITY_NAME }} \
              --resource-group ${{ secrets.AKS_RG }} \
              --issuer $OIDC_URL \
              --subject system:serviceaccount:${NS}:${NS}-sa \
              --audiences api://AzureADTokenExchange
          done

      - name: Verificar IP público do NGINX
        run: |
            IP=$(az aks command invoke \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_NAME }} \
            --command "kubectl get svc nginx-ingress-ingress-nginx-controller -n nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}'" \
            --query "commandResult" -o tsv)

            echo "NGINX EXTERNAL IP: $IP"

            if [ -z "$IP" ]; then
              echo "IP público do NGINX não foi provisionado."
              exit 1
            else
              echo "IP público do NGINX provisionado com sucesso: $IP"
            fi
